/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package me.distributedaccounts.mgmt.service.event;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountUpdatedEffect extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountUpdatedEffect\",\"namespace\":\"me.distributedaccounts.mgmt.service.event\",\"fields\":[{\"name\":\"accountData\",\"type\":{\"type\":\"record\",\"name\":\"AccountData\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"balance\",\"type\":\"float\"},{\"name\":\"active\",\"type\":\"boolean\"},{\"name\":\"description\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public me.distributedaccounts.mgmt.service.event.AccountData accountData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public AccountUpdatedEffect() {}

  /**
   * All-args constructor.
   */
  public AccountUpdatedEffect(me.distributedaccounts.mgmt.service.event.AccountData accountData) {
    this.accountData = accountData;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return accountData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: accountData = (me.distributedaccounts.mgmt.service.event.AccountData)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountData' field.
   */
  public me.distributedaccounts.mgmt.service.event.AccountData getAccountData() {
    return accountData;
  }

  /**
   * Sets the value of the 'accountData' field.
   * @param value the value to set.
   */
  public void setAccountData(me.distributedaccounts.mgmt.service.event.AccountData value) {
    this.accountData = value;
  }

  /** Creates a new AccountUpdatedEffect RecordBuilder */
  public static me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder newBuilder() {
    return new me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder();
  }
  
  /** Creates a new AccountUpdatedEffect RecordBuilder by copying an existing Builder */
  public static me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder newBuilder(me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder other) {
    return new me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder(other);
  }
  
  /** Creates a new AccountUpdatedEffect RecordBuilder by copying an existing AccountUpdatedEffect instance */
  public static me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder newBuilder(me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect other) {
    return new me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder(other);
  }
  
  /**
   * RecordBuilder for AccountUpdatedEffect instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountUpdatedEffect>
    implements org.apache.avro.data.RecordBuilder<AccountUpdatedEffect> {

    private me.distributedaccounts.mgmt.service.event.AccountData accountData;

    /** Creates a new Builder */
    private Builder() {
      super(me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountData)) {
        this.accountData = data().deepCopy(fields()[0].schema(), other.accountData);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AccountUpdatedEffect instance */
    private Builder(me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect other) {
            super(me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.SCHEMA$);
      if (isValidValue(fields()[0], other.accountData)) {
        this.accountData = data().deepCopy(fields()[0].schema(), other.accountData);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'accountData' field */
    public me.distributedaccounts.mgmt.service.event.AccountData getAccountData() {
      return accountData;
    }
    
    /** Sets the value of the 'accountData' field */
    public me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder setAccountData(me.distributedaccounts.mgmt.service.event.AccountData value) {
      validate(fields()[0], value);
      this.accountData = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'accountData' field has been set */
    public boolean hasAccountData() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'accountData' field */
    public me.distributedaccounts.mgmt.service.event.AccountUpdatedEffect.Builder clearAccountData() {
      accountData = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public AccountUpdatedEffect build() {
      try {
        AccountUpdatedEffect record = new AccountUpdatedEffect();
        record.accountData = fieldSetFlags()[0] ? this.accountData : (me.distributedaccounts.mgmt.service.event.AccountData) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
