/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package me.distributedaccounts.mgmt.service.event;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountDeletedEffect extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountDeletedEffect\",\"namespace\":\"me.distributedaccounts.mgmt.service.event\",\"fields\":[{\"name\":\"accountId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence accountId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public AccountDeletedEffect() {}

  /**
   * All-args constructor.
   */
  public AccountDeletedEffect(java.lang.CharSequence accountId) {
    this.accountId = accountId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return accountId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: accountId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountId' field.
   */
  public java.lang.CharSequence getAccountId() {
    return accountId;
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(java.lang.CharSequence value) {
    this.accountId = value;
  }

  /** Creates a new AccountDeletedEffect RecordBuilder */
  public static me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder newBuilder() {
    return new me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder();
  }
  
  /** Creates a new AccountDeletedEffect RecordBuilder by copying an existing Builder */
  public static me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder newBuilder(me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder other) {
    return new me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder(other);
  }
  
  /** Creates a new AccountDeletedEffect RecordBuilder by copying an existing AccountDeletedEffect instance */
  public static me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder newBuilder(me.distributedaccounts.mgmt.service.event.AccountDeletedEffect other) {
    return new me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder(other);
  }
  
  /**
   * RecordBuilder for AccountDeletedEffect instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountDeletedEffect>
    implements org.apache.avro.data.RecordBuilder<AccountDeletedEffect> {

    private java.lang.CharSequence accountId;

    /** Creates a new Builder */
    private Builder() {
      super(me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AccountDeletedEffect instance */
    private Builder(me.distributedaccounts.mgmt.service.event.AccountDeletedEffect other) {
            super(me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.SCHEMA$);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'accountId' field */
    public java.lang.CharSequence getAccountId() {
      return accountId;
    }
    
    /** Sets the value of the 'accountId' field */
    public me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder setAccountId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.accountId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'accountId' field has been set */
    public boolean hasAccountId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'accountId' field */
    public me.distributedaccounts.mgmt.service.event.AccountDeletedEffect.Builder clearAccountId() {
      accountId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public AccountDeletedEffect build() {
      try {
        AccountDeletedEffect record = new AccountDeletedEffect();
        record.accountId = fieldSetFlags()[0] ? this.accountId : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
